{ /**********
   * Clangd *
   **********/
  // Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)
  "clangd.arguments": [
    //设置clangd server的驱动库路径
    "--query-driver=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\HostX64\\x64\\cl.exe",
    "--compile-commands-dir=.vscode/compile_commands.json",
    // 全局补全(输入时弹出的建议将会给出不在当前作用域可见的索引，插入后将自动补充作用域标识符)
    //如，在`int main()`中直接写`cout`，
    //    即使没有`#include <iostream>`，也会给出`std::cout`的建议
    //    配合"--header-insertion=iwyu" (见下)，还可自动插入缺失的头文件
    "--all-scopes-completion",
    // 后台分析并保存索引文件
    "--background-index",
    // 启用 Clang-Tidy 以提供「静态检查」
    "--clang-tidy",
    // 当 clangd 准备就绪时，用它来分析建议
    "--completion-parse=auto",
    // 建议风格：打包(重载函数只会给出一个建议）；反可以设置为 detailed
    "--completion-style=bundled",
    // 启用读取项目配置文件和用户配置文件，其设置格式均为YAML
    //项目配置文件是在项目文件夹里的“.clangd”
    //用户配置文件是“clangd/config.yaml”，该文件来自如下目录
    //    Windows: %USERPROFILE%\AppData\Local
    //    MacOS: ~/Library/Preferences/
    //    Others: $XDG_CONFIG_HOME, usually ~/.config
    "--enable-config",
    // 默认格式化风格: 在 clangd 没能找到 .clang-format 文件时采用
    //这里用的谷歌开源项目代码风格（可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU 等）
    "--fallback-style=Google",
    // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
    //我选择禁用
    "--function-arg-placeholders=false",
    // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
    "--header-insertion-decorators",
    // 插入建议时自动补充头文件
    "--header-insertion=iwyu",
    // 为标准库头文件启用清理功能（不成熟！）
    // "--include-cleaner-stdlib",
    // 让 Clangd 生成更详细的日志
    "--log=verbose",
    // 分析转发函数 (emplace-like)
    "--parse-forwarding-functions",
    // pch优化的位置 (memory 或 disk，选择memory会增加内存开销，但会提升性能)
    "--pch-storage=memory",
    // 输出的 JSON 文件更美观
    "--pretty",
    // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
    //我采用决策树
    "--ranking-model=decision_forest",
    // 同时开启的任务数量
    "-j=12",
  ],
  // clangd所在路径
  "clangd.path": "D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe",
  // 自动检测 clangd 更新
  "clangd.checkUpdates": true,
  // 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用
  // 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析
  //系统头文件、当前文件、当前文件`#include`的文件
  // compile_flags.json 可通过 CMake 等工具生成
  "clangd.fallbackFlags": [
    //包含头文件
    "-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include",
    "-I${workspaceFolder}/src/includes",
    
    "-pedantic",
    "-Wall",
    "-Wextra",
    "-Wcast-align",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
    "-Wmisleading-indentation",
    "-Wnon-virtual-dtor",
    "-Wnull-dereference",
    "-Wold-style-cast",
    "-Woverloaded-virtual",
    "-Wpedantic",
    "-Wshadow",
    "-Wunused",
    "-pthread",
    "-fuse-ld=lld",
    "-fsanitize=address",
    "-fsanitize=undefined",
    "-stdlib=libc++",
    "-std=c++2b"
  ],
  // 重启 clangd 时重载配置
  // 重启方法：
  //Windows: Alt + Shift + P 打开命令面板，然后搜索“clangd: restart”
  //MacOS: Command + Shift + P 打开命令面板，然后搜索“clangd: restart"
  "clangd.onConfigChanged": "restart",
  // 借助网上的信息排序建议
  "clangd.serverCompletionRanking": true,
  "clangd.detectExtensionConflicts": true,
  // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  /*********
   * XMake *
   *********/
}